var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// package.json
var require_package = __commonJS({
  "package.json"(exports, module) {
    module.exports = {
      name: "uploadthing",
      version: "4.0.0",
      license: "MIT",
      exports: {
        "./package.json": "./package.json",
        "./client": {
          import: "./dist/client.mjs",
          types: "./dist/client.d.ts"
        },
        "./server": {
          import: "./dist/server.mjs",
          types: "./dist/server.d.ts",
          default: "./dist/server.mjs"
        },
        "./next": {
          import: "./dist/next.mjs",
          types: "./dist/next.d.ts"
        },
        "./next-legacy": {
          import: "./dist/next-legacy.mjs",
          types: "./dist/next-legacy.d.ts"
        }
      },
      files: [
        "dist"
      ],
      typesVersions: {
        "*": {
          "*": [
            "dist/*"
          ]
        }
      },
      scripts: {
        lint: 'eslint "**/*.{ts,tsx}" --max-warnings 0',
        build: "tsup",
        prebuild: "tsup",
        clean: "git clean -xdf dist node_modules",
        dev: "tsup --watch",
        test: "vitest run",
        "test:watch": "vitest",
        typecheck: "tsc --noEmit"
      },
      dependencies: {
        "mime-types": "^2.1.35"
      },
      devDependencies: {
        "@types/mime-types": "2.1.1",
        "@types/node": "18.16.0",
        "@uploadthing/eslint-config": "0.1.0",
        "@uploadthing/tsconfig": "0.1.0",
        "@uploadthing/tsup-config": "0.1.0",
        eslint: "^8.40.0",
        next: "13.4.4",
        tsup: "6.7.0",
        "type-fest": "^3.11.0",
        typescript: "5.1.0-beta",
        vitest: "^0.30.1"
      },
      publishConfig: {
        access: "public"
      }
    };
  }
});

// src/upload-builder.ts
function internalCreateBuilder(initDef = {}) {
  const _def = {
    // Default router config
    routerConfig: {
      image: {
        maxFileSize: "4MB"
      }
    },
    middleware: () => ({}),
    // Overload with properties passed in
    ...initDef
  };
  return {
    middleware(userMiddleware) {
      return internalCreateBuilder({
        ..._def,
        middleware: userMiddleware
      });
    },
    onUploadComplete(userUploadComplete) {
      return {
        _def,
        resolver: userUploadComplete
      };
    }
  };
}
function createBuilder() {
  return (input) => {
    return internalCreateBuilder({ routerConfig: input });
  };
}

// src/types.ts
var unsetMarker = "unsetMarker";

// src/helper-functions.ts
var helper_functions_exports = {};
__export(helper_functions_exports, {
  deleteFiles: () => deleteFiles,
  getFileUrls: () => getFileUrls
});

// src/constants.ts
var packageJson = require_package();
if (!packageJson.version)
  throw new Error("no version found in package.json");
var UPLOADTHING_VERSION = packageJson.version;

// src/utils.ts
import { lookup } from "mime-types";

// src/internal/handler.ts
var generateUploadThingURL = (path) => {
  const host = process.env.CUSTOM_INFRA_URL ?? "https://uploadthing.com";
  return `${host}${path}`;
};
if (process.env.NODE_ENV !== "development") {
  console.log("[UT] UploadThing dev server is now running!");
}

// src/helper-functions.ts
var UT_SECRET = process.env.UPLOADTHING_SECRET;
var deleteFiles = async (fileKeys) => {
  if (!Array.isArray(fileKeys))
    fileKeys = [fileKeys];
  if (!UT_SECRET)
    throw new Error("Missing UPLOADTHING_SECRET env variable.");
  const res = await fetch(generateUploadThingURL("/api/deleteFile"), {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "x-uploadthing-api-key": UT_SECRET,
      "x-uploadthing-version": UPLOADTHING_VERSION
    },
    body: JSON.stringify({ fileKeys })
  });
  if (!res.ok) {
    throw new Error("Failed to delete files");
  }
  return res.json();
};
var getFileUrls = async (fileKeys) => {
  if (!Array.isArray(fileKeys))
    fileKeys = [fileKeys];
  if (!UT_SECRET)
    throw new Error("Missing UPLOADTHING_SECRET env variable.");
  const res = await fetch(generateUploadThingURL("/api/getFileUrl"), {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "x-uploadthing-api-key": UT_SECRET,
      "x-uploadthing-version": UPLOADTHING_VERSION
    },
    body: JSON.stringify({ fileKeys })
  });
  if (!res.ok) {
    throw new Error("Failed to get file urls");
  }
  return res.json().then(({ data }) => data);
};

// server.ts
var createUploadthing = () => createBuilder();
export {
  createUploadthing,
  unsetMarker,
  helper_functions_exports as utapi
};
//# sourceMappingURL=server.mjs.map