import { NextApiRequest, NextApiResponse } from 'next';
import { NextRequest } from 'next/server';

declare const unsetMarker: "unsetMarker" & {
    __brand: "unsetMarker";
};
type UnsetMarker = typeof unsetMarker;
type Simplify<TType> = {
    [TKey in keyof TType]: TType[TKey];
} & {};
type MaybePromise<TType> = TType | Promise<TType>;
type AnyRuntime = "app" | "pages" | "web";
interface AnyParams {
    _metadata: any;
    _runtime: any;
}
type UploadedFile = {
    name: string;
    key: string;
    url: string;
    size: number;
};
type AllowedFileType = "image" | "video" | "audio" | "blob";
type PowOf2 = 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1024;
type SizeUnit = "B" | "KB" | "MB" | "GB";
type FileSize = `${PowOf2}${SizeUnit}`;
type RouteConfig = {
    maxFileSize: FileSize;
    maxFileCount: number;
};
type ExpandedRouteConfig = Partial<Record<AllowedFileType, RouteConfig>>;
type PartialRouteConfig = Partial<Record<AllowedFileType, Partial<RouteConfig>>>;
type FileRouterInputConfig = AllowedFileType[] | PartialRouteConfig;
type ResolverOptions<TParams extends AnyParams> = {
    metadata: Simplify<TParams["_metadata"] extends UnsetMarker ? undefined : TParams["_metadata"]>;
    file: UploadedFile;
};
type MiddlewareFnArgs<TRuntime> = TRuntime extends "web" ? {
    req: Request;
    res: never;
} : TRuntime extends "app" ? {
    req: NextRequest;
    res: never;
} : {
    req: NextApiRequest;
    res: NextApiResponse;
};
type MiddlewareFn<TOutput extends Record<string, unknown>, TRuntime extends string> = MiddlewareFnArgs<TRuntime>["res"] extends never ? (req: MiddlewareFnArgs<TRuntime>["req"]) => MaybePromise<TOutput> : (req: MiddlewareFnArgs<TRuntime>["req"], res: MiddlewareFnArgs<TRuntime>["res"]) => MaybePromise<TOutput>;
type ReqMiddlewareFn<TOutput extends Record<string, unknown>> = MiddlewareFn<TOutput, "web">;
type NextReqMiddlewareFn<TOutput extends Record<string, unknown>> = MiddlewareFn<TOutput, "app">;
type NextApiMiddlewareFn<TOutput extends Record<string, unknown>> = MiddlewareFn<TOutput, "pages">;
type ResolverFn<TParams extends AnyParams> = (opts: ResolverOptions<TParams>) => MaybePromise<void>;
interface UploadBuilder<TParams extends AnyParams> {
    middleware: <TOutput extends Record<string, unknown>>(fn: MiddlewareFn<TOutput, TParams["_runtime"]>) => UploadBuilder<{
        _metadata: TOutput;
        _runtime: TParams["_runtime"];
    }>;
    onUploadComplete: (fn: ResolverFn<TParams>) => Uploader<TParams>;
}
type UploadBuilderDef<TRuntime extends AnyRuntime> = {
    routerConfig: FileRouterInputConfig;
    middleware: MiddlewareFn<{}, TRuntime>;
};
interface Uploader<TParams extends AnyParams> {
    _def: TParams & UploadBuilderDef<TParams["_runtime"]>;
    resolver: ResolverFn<TParams>;
}
type FileRouter<TParams extends AnyParams = AnyParams> = Record<string, Uploader<TParams>>;

export { AnyRuntime as A, ExpandedRouteConfig as E, FileRouter as F, MaybePromise as M, NextReqMiddlewareFn as N, ReqMiddlewareFn as R, SizeUnit as S, UploadBuilder as U, FileRouterInputConfig as a, UnsetMarker as b, AnyParams as c, UploadedFile as d, AllowedFileType as e, FileSize as f, NextApiMiddlewareFn as g, UploadBuilderDef as h, Uploader as i, unsetMarker as u };
