import type { NextApiResponse } from "next";
import type { AllowedFileType, AnyRuntime, FileRouter } from "../types";
export declare const fileSizeToBytes: (input: string) => number | Error;
export declare const generateUploadThingURL: (path: `/${string}`) => string;
export type RouterWithConfig<TRouter extends FileRouter> = {
    router: TRouter;
    config?: {
        callbackUrl?: string;
        uploadthingId?: string;
        uploadthingSecret?: string;
    };
};
export declare const buildRequestHandler: <TRouter extends FileRouter, TRuntime extends AnyRuntime>(opts: RouterWithConfig<TRouter>) => (input: {
    uploadthingHook?: string | undefined;
    slug?: string | undefined;
    actionType?: string | undefined;
    req: Partial<Request> & {
        json: Request["json"];
    };
    res?: (TRuntime extends "pages" ? NextApiResponse : undefined) | undefined;
}) => Promise<{
    status: number;
    body?: undefined;
    message?: undefined;
} | {
    body: {
        presignedUrl: {
            url: string;
            fields: Record<string, string>;
        };
        name: string;
        key: string;
    }[];
    status: number;
    message?: undefined;
} | {
    status: number;
    message: string;
    body?: undefined;
}>;
export declare const buildPermissionsInfoHandler: <TRouter extends FileRouter>(opts: RouterWithConfig<TRouter>) => () => {
    slug: keyof TRouter;
    config: Partial<Record<AllowedFileType, {
        maxFileSize: "1B" | "1KB" | "1MB" | "1GB" | "2B" | "2KB" | "2MB" | "2GB" | "4B" | "4KB" | "4MB" | "4GB" | "8B" | "8KB" | "8MB" | "8GB" | "16B" | "16KB" | "16MB" | "16GB" | "32B" | "32KB" | "32MB" | "32GB" | "64B" | "64KB" | "64MB" | "64GB" | "128B" | "128KB" | "128MB" | "128GB" | "256B" | "256KB" | "256MB" | "256GB" | "512B" | "512KB" | "512MB" | "512GB" | "1024B" | "1024KB" | "1024MB" | "1024GB";
        maxFileCount: number;
    }>>;
}[];
//# sourceMappingURL=handler.d.ts.map