/// <reference types="react" />
import type { DANGEROUS__uploadFiles } from "uploadthing/client";
import type { FileRouter } from "uploadthing/server";
type EndpointHelper<TRouter extends void | FileRouter> = void extends TRouter ? "YOU FORGOT TO PASS THE GENERIC" : keyof TRouter;
/**
 * @example
 * <UploadButton<OurFileRouter>
 *   endpoint="someEndpoint"
 *   onUploadComplete={(res) => console.log(res)}
 *   onUploadError={(err) => console.log(err)}
 * />
 */
export declare function UploadButton<TRouter extends void | FileRouter = void>(props: {
    endpoint: EndpointHelper<TRouter>;
    onClientUploadComplete?: (res?: Awaited<ReturnType<typeof DANGEROUS__uploadFiles>>) => void;
    onUploadError?: (error: Error) => void;
}): JSX.Element;
export declare const UploadDropzone: <TRouter extends void | FileRouter = void>(props: {
    endpoint: EndpointHelper<TRouter>;
    onClientUploadComplete?: ((res?: Awaited<ReturnType<typeof DANGEROUS__uploadFiles>>) => void) | undefined;
    onUploadError?: ((error: Error) => void) | undefined;
}) => JSX.Element;
export declare const Uploader: <TRouter extends void | FileRouter = void>(props: {
    endpoint: EndpointHelper<TRouter>;
    onClientUploadComplete?: (() => void) | undefined;
    url?: string | undefined;
}) => JSX.Element;
export {};
//# sourceMappingURL=component.d.ts.map