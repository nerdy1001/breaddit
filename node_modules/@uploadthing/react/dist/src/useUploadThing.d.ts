import { DANGEROUS__uploadFiles } from "uploadthing/client";
import type { ExpandedRouteConfig, FileRouter } from "uploadthing/server";
export declare const useUploadThing: <T extends string>({ endpoint, onClientUploadComplete, onUploadError, }: {
    endpoint: T;
    onClientUploadComplete?: ((res?: Awaited<ReturnType<typeof DANGEROUS__uploadFiles>>) => void) | undefined;
    onUploadError?: ((e: Error) => void) | undefined;
}) => {
    readonly startUpload: (files: File[]) => Promise<{
        fileUrl: string;
        fileKey: string;
    }[] | undefined>;
    readonly isUploading: boolean;
    readonly permittedFileInfo: {
        slug: string;
        config: ExpandedRouteConfig;
    } | undefined;
};
export declare const generateReactHelpers: <TRouter extends FileRouter>() => {
    readonly useUploadThing: ({ endpoint, onClientUploadComplete, onUploadError, }: {
        endpoint: keyof TRouter extends string ? keyof TRouter : string;
        onClientUploadComplete?: ((res?: Awaited<ReturnType<typeof DANGEROUS__uploadFiles>>) => void) | undefined;
        onUploadError?: ((e: Error) => void) | undefined;
    }) => {
        readonly startUpload: (files: File[]) => Promise<{
            fileUrl: string;
            fileKey: string;
        }[] | undefined>;
        readonly isUploading: boolean;
        readonly permittedFileInfo: {
            slug: string;
            config: ExpandedRouteConfig;
        } | undefined;
    };
    readonly uploadFiles: (files: File[], endpoint: keyof TRouter extends string ? keyof TRouter : string, config?: {
        url?: string | undefined;
    } | undefined) => Promise<{
        fileUrl: string;
        fileKey: string;
    }[]>;
};
export type FullFile = {
    file: File;
    contents: string;
};
//# sourceMappingURL=useUploadThing.d.ts.map